#pragma kernel March

#include "Includes/MarchingTables.hlsl"

struct Vertex {
	int id;
	float3 p;
};

struct Triangle {
	int v1, v2, v3;
};

// Inputs
RWStructuredBuffer<float> weights;
float isoLevel;
uint dimension;

// Output
AppendStructuredBuffer<Vertex> vertexBuffer;
AppendStructuredBuffer<Triangle> triangleBuffer;

int cubicToLinear(int x, int y, int z) {
	return (z * dimension * dimension) + (y * dimension) + x;
}

// There are at most 5 triangles per cube and 3 vertices per triangle, which
// lets us assign a unique ID per vertex.
int vertexId(int edgeId, int triangleId, int x, int y, int z) {
	return edgeId + 3 * triangleId + 15 * cubicToLinear(x, y, z);
}

Vertex vertex(int x, int y, int z, int triId, int edgeId) {
	Vertex v;
	// The edgeID in [0, 12) corresponds to the marching cubes table. Edges 2, 3,
	// and 11 are treated as the edges in "this" cube, and all others are in
	// "another" cube. E.g. edge 1 (top right) is just edge 3 in the neighboring
	// cube.
	// We use this to assign a unique vertex ID which lets us dedupliacate vertices
	// CPU-side. In the future we might be able to prevent duplicate generation as
	// well.
	switch (edgeId) {
	case 0:
		v.id = vertexId(0, triId, x, y, z + 1);
		return v;
	case 1:
		v.id = vertexId(1, triId, x + 1, y, z);
		return v;
	case 2:
		v.id = vertexId(0, triId, x, y, z);
		return v;
	case 3:
		v.id = vertexId(1, triId, x, y, z);
		return v;
	case 4:
		v.id = vertexId(0, triId, x, y + 1, z + 1);
		return v;
	case 5:
		v.id = vertexId(1, triId, x + 1, y + 1, z);
		return v;
	case 6:
		v.id = vertexId(0, triId, x, y + 1, z);
		return v;
	case 7:
		v.id = vertexId(1, triId, x, y + 1, z);
		return v;
	case 8:
		v.id = vertexId(2, triId, x, y, z + 1);
		return v;
	case 9:
		v.id = vertexId(2, triId, x + 1, y, z + 1);
		return v;
	case 10:
		v.id = vertexId(2, triId, x + 1, y, z);
		return v;
	//case 11:
	default:
		v.id = vertexId(2, triId, x, y, z);
		return v;
	}
}

// Returns a ratio describing how much further w1 is from the isolevel than w2.
// When this number is large, we want to draw lines closer to w2 (the isoLevel
// is closer to w2). This can be used as the scaling factor to bias towards w2.
float scalingFactor(float w1, float w2) {
	return abs(w1 - isoLevel) / (
		abs(w2 - isoLevel) + abs(w1 - isoLevel));
}

// 512 total threads processing one 8x8x8 matrix at a time
[numthreads(8, 8, 8)]
void March(uint3 id: SV_DispatchThreadID) {
	if (id.x > dimension - 1 || id.y > dimension - 1 || id.z > dimension - 1)
		return;

	float cubeWeights[8] = {
		weights[cubicToLinear(id.x,     id.y,     id.z + 1)],
		weights[cubicToLinear(id.x + 1, id.y,     id.z + 1)],
		weights[cubicToLinear(id.x + 1, id.y,     id.z)],
		weights[cubicToLinear(id.x,     id.y,     id.z)],
		weights[cubicToLinear(id.x,     id.y + 1, id.z + 1)],
		weights[cubicToLinear(id.x + 1, id.y + 1, id.z + 1)],
		weights[cubicToLinear(id.x + 1, id.y + 1, id.z)],
		weights[cubicToLinear(id.x,     id.y + 1, id.z)]
	};

	// Calculate the lookup table index. The index is synonymous with
	// the precise configuration of points above and below the
	// isoLevel and identifies what triangles to draw.
	uint index = 0;
	if (cubeWeights[0] > isoLevel) index |= 1;
	if (cubeWeights[1] > isoLevel) index |= 2;
	if (cubeWeights[2] > isoLevel) index |= 4;
	if (cubeWeights[3] > isoLevel) index |= 8;
	if (cubeWeights[4] > isoLevel) index |= 16;
	if (cubeWeights[5] > isoLevel) index |= 32;
	if (cubeWeights[6] > isoLevel) index |= 64;
	if (cubeWeights[7] > isoLevel) index |= 128;

	// The triangles we need to draw have their vertices along these
	// edges of the cube. We pick a point via linear interpolation.
	int edges[] = trianglesTable[index];
	int triIndex = 0; // ranges from 0 to at most 4
	for (uint i = 0; edges[i] != -1; i += 3)
	{
		int e1[] = edgesTable[edges[i]];
		int e2[] = edgesTable[edges[i + 1]];
		int e3[] = edgesTable[edges[i + 2]];
		float3 one = float3(1.0, 1.0, 1.0);

		Vertex a, b, c;
		a = vertex(id.x, id.y, id.z, triIndex, edges[i]);
		b = vertex(id.x, id.y, id.z, triIndex, edges[i + 1]);
		c = vertex(id.x, id.y, id.z, triIndex, edges[i + 2]);

		a.p = id + lerp(
			verticesTable[e1[0]],
			verticesTable[e1[1]],
			one * scalingFactor(cubeWeights[e1[0]], cubeWeights[e1[1]]));
		b.p = id + lerp(
			verticesTable[e2[0]],
			verticesTable[e2[1]],
			one * scalingFactor(cubeWeights[e2[0]], cubeWeights[e2[1]]));
		c.p = id + lerp(
			verticesTable[e3[0]],
			verticesTable[e3[1]],
			one * scalingFactor(cubeWeights[e3[0]], cubeWeights[e3[1]]));

		vertexBuffer.Append(a);
		vertexBuffer.Append(b);
		vertexBuffer.Append(c);

		Triangle t;
		t.v1 = a.id;
		t.v2 = b.id;
		t.v3 = c.id;
		triangleBuffer.Append(t);

		triIndex++;
	}
}
